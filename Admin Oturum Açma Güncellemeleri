using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using WebKuaforProje.ViewModels;
using WebKuaforProje.Models;


namespace WebKuaforProje.Controllers
{
    public class AccountController : Controller
    {
        private readonly SignInManager<User> signInManager;
        private readonly UserManager<User> userManager;

        public AccountController(SignInManager<User> signInManager, UserManager<User> userManager)
        {
            this.signInManager = signInManager;
            this.userManager = userManager;
        }
        public IActionResult Login()
        {
            return View();
        }

        [HttpPost]
        public async Task<IActionResult> Login(LoginViewModel model)
        {
            if (ModelState.IsValid)
            {
                var user = await userManager.FindByEmailAsync(model.Email);

                if (user == null)
                {
                    ModelState.AddModelError("", "Email or password is incorrect.");
                    return View(model);
                }

                // Admin kontrolü
                if ((model.Email == "B221210056@sakarya.edu.tr" || model.Email == "G231210372@sakarya.edu.tr") && model.Password == "Sau1234.")
                {
                    Console.WriteLine("Admin girişine yönlendirme yapılacak.");
                    return RedirectToAction("AdminPanel", "Admin"); // AdminPanel, AdminController içinde
                }

                var result = await signInManager.PasswordSignInAsync(user.UserName, model.Password, model.RememberMe, false);//

                if (result.Succeeded)
                {
                    // Kullanıcının rolüne göre yönlendirme
                    if (await userManager.IsInRoleAsync(user, "Admin"))
                    {
                        return RedirectToAction("AdminPanel", "Admin");
                    }

                    return RedirectToAction("Index", "Home");
                }

                ModelState.AddModelError("", "Email or password is incorrect.");
            }

            return View(model); // Hatalar varsa tekrar aynı sayfaya dön.
        }



        public IActionResult Register()
        {
            return View();
        }

        [HttpPost]
        public async Task<IActionResult> Register(RegisterViewModel model)
        {
            if (!ModelState.IsValid)
            {
                // Email doğrulama hatasını yakala ve yazdır
                foreach (var error in ModelState["Email"].Errors)
                {
                    Console.WriteLine(error.ErrorMessage);
                }

                return View(model);
            }

            // Eğer buraya geliyorsa model.Email doğru alınmış olmalı
            Console.WriteLine("Email: " + model.Email);
            return RedirectToAction("Index", "Home");
        }


        [HttpPost]
        public async Task<IActionResult> VerifyEmail(VerifyEmailViewModel model)
        {
            if (ModelState.IsValid)
            {
                var user = await userManager.FindByNameAsync(model.Email);

                if (user == null)
                {
                    ModelState.AddModelError("", "Something is wrong!");
                    return View(model);
                }
                else
                {
                    return RedirectToAction("ChangePassword", "Account", new { username = user.UserName });
                }
            }
            return View(model);
        }

        public IActionResult ChangePassword(string username)
        {
            if (string.IsNullOrEmpty(username))
            {
                return RedirectToAction("VerifyEmail", "Account");
            }
            return View(new ChangePasswordViewModel { Email = username });
        }

        [HttpPost]
        public async Task<IActionResult> ChangePassword(ChangePasswordViewModel model)
        {
            if (ModelState.IsValid)
            {
                var user = await userManager.FindByNameAsync(model.Email);
                if (user != null)
                {
                    var result = await userManager.RemovePasswordAsync(user);
                    if (result.Succeeded)
                    {
                        result = await userManager.AddPasswordAsync(user, model.NewPassword);
                        return RedirectToAction("Login", "Account");
                    }
                    else
                    {

                        foreach (var error in result.Errors)
                        {
                            ModelState.AddModelError("", error.Description);
                        }

                        return View(model);
                    }
                }
                else
                {
                    ModelState.AddModelError("", "Email not found!");
                    return View(model);
                }
            }
            else
            {
                ModelState.AddModelError("", "Something went wrong. try again.");
                return View(model);
            }
        }

        public async Task<IActionResult> Logout()
        {
            await signInManager.SignOutAsync();
            return RedirectToAction("Index", "Home");
        }
    }
}






//ADMİN OTURUM AÇMA GÜNCELLEMELERİ
